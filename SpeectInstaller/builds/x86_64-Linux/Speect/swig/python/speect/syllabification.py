# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Speect Plug-in for SSyllabification class"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_syllabification')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_syllabification')
    _syllabification = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_syllabification', [dirname(__file__)])
        except ImportError:
            import _syllabification
            return _syllabification
        if fp is not None:
            try:
                _mod = imp.load_module('_syllabification', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _syllabification = swig_import_helper()
    del swig_import_helper
else:
    import _syllabification
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


__version__ = "1.0.0"
__license__= "mit"

import speect
class SSyllabification(_object):
    """Proxy of C SSyllabification struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SSyllabification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SSyllabification, name)
    __repr__ = _swig_repr
    __swig_setmethods__["features"] = _syllabification.SSyllabification_features_set
    __swig_getmethods__["features"] = _syllabification.SSyllabification_features_get
    if _newclass:
        features = _swig_property(_syllabification.SSyllabification_features_get, _syllabification.SSyllabification_features_set)

    def name(self):
        """name(SSyllabification self) -> char const *"""
        return _syllabification.SSyllabification_name(self)


    def description(self):
        """description(SSyllabification self) -> char const *"""
        return _syllabification.SSyllabification_description(self)


    def language(self):
        """language(SSyllabification self) -> char const *"""
        return _syllabification.SSyllabification_language(self)


    def lang_code(self):
        """lang_code(SSyllabification self) -> char const *"""
        return _syllabification.SSyllabification_lang_code(self)


    def version(self):
        """

        Return the Speect Engine library version in a tuple, (major version number, minor
        version number, patch name, release name).

        :rtype: tuple

        """
        return _syllabification.SSyllabification_version(self)


    def syllabify(self, word, phone_list):
        """
        syllabify(word, phone_list):

        Syllabify the given phone list of the given word item. The word must be an
        ``SItem`` type so that the syllabification algorithm has access to any
        voice features it requires.

        :param word: The word item.
        :type word: SItem
        :param phone_list: The list of phones for the given word item.
        :type phone_list: list
        :return: A List of lists where the primary list are syllables and the secondary
                 lists are the phones in the syllables. For example, for the word *mathematics*,
                 the phonelist is ::

                     [m , ae , th, ax, m, ae, t, ih, k, s]

                 and the returned list is::

                     [[m, ae], [th, ax], [m, ae], [t, ih, k, s]]

        :rtype: list
        """

        if not isinstance(phone_list, list):
            raise TypeError("Argument \"phone_list\" must be is list type")

        return _syllabification_syllibify(self, word, phone_list)


    def __init__(self):
        """__init__(SSyllabification self) -> SSyllabification"""
        this = _syllabification.new_SSyllabification()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _syllabification.delete_SSyllabification
    __del__ = lambda self: None
SSyllabification_swigregister = _syllabification.SSyllabification_swigregister
SSyllabification_swigregister(SSyllabification)


def _syllabification_syllibify(arg1, word, phoneList):
    """_syllabification_syllibify(SSyllabification arg1, SItem word, PyObject * phoneList) -> PyObject *"""
    return _syllabification._syllabification_syllibify(arg1, word, phoneList)
# This file is compatible with both classic and new-style classes.


