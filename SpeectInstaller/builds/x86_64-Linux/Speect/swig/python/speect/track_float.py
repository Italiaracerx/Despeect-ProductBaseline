# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Speect Plug-in for STrackFloat class"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_track_float')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_track_float')
    _track_float = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_track_float', [dirname(__file__)])
        except ImportError:
            import _track_float
            return _track_float
        if fp is not None:
            try:
                _mod = imp.load_module('_track_float', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _track_float = swig_import_helper()
    del swig_import_helper
else:
    import _track_float
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


__version__ = "1.0.0"
__license__= "mit"

import speect
class STrackFloat(_object):
    """

    STrackFloat(times, mlist)

    A native Speect class for containing an track of floating point values. A track
    is a class for storing time aligned coefficients. Each row of a track
    corresponds to a specific time instant. A column of a track is known as a
    channel, while track rows are knows as frames, for example:

    +-------------+---------+------------+------------+------------+
    |             | Times   | Channel 0  | Channel 1  | Channel 2  |
    +=============+=========+============+============+============+
    | **Frame 1** | 0.131   | 0.2        | 2.1        | 8.6        |
    +-------------+---------+------------+------------+------------+
    | **Frame 2** | 0.254   | 5.22       | 675.32     | 12.55      |
    +-------------+---------+------------+------------+------------+
    | **Frame 3** | 0.428   | 0.453      | 0.54       | 9.6        |
    +-------------+---------+------------+------------+------------+

    Create a new object, that contains an track of floating point point values.

    The call to create the above track one would be::

        track = speect.track_float.STrackFloat([0.131, 0.254, 0.428], [[0.2, 2.1, 8.6], [5.22, 675.32, 12.55], [0.453, 0.54, 9.6]])

    :param times: A Python list of the time values, floating point.
    :type times: list
    :param mlist: A Python list of lists containing only floating point values (frames and channels).
    :type mlist: list
    :return: Newly created STrackFloat object.
    :rtype: STrackFloat

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STrackFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STrackFloat, name)
    __repr__ = _swig_repr
    __swig_getmethods__["row_count"] = _track_float.STrackFloat_row_count_get
    if _newclass:
        row_count = _swig_property(_track_float.STrackFloat_row_count_get)
    __swig_getmethods__["col_count"] = _track_float.STrackFloat_col_count_get
    if _newclass:
        col_count = _swig_property(_track_float.STrackFloat_col_count_get)

    def __init__(self, times, fm):
        """

        STrackFloat(times, mlist)

        A native Speect class for containing an track of floating point values. A track
        is a class for storing time aligned coefficients. Each row of a track
        corresponds to a specific time instant. A column of a track is known as a
        channel, while track rows are knows as frames, for example:

        +-------------+---------+------------+------------+------------+
        |             | Times   | Channel 0  | Channel 1  | Channel 2  |
        +=============+=========+============+============+============+
        | **Frame 1** | 0.131   | 0.2        | 2.1        | 8.6        |
        +-------------+---------+------------+------------+------------+
        | **Frame 2** | 0.254   | 5.22       | 675.32     | 12.55      |
        +-------------+---------+------------+------------+------------+
        | **Frame 3** | 0.428   | 0.453      | 0.54       | 9.6        |
        +-------------+---------+------------+------------+------------+

        Create a new object, that contains an track of floating point point values.

        The call to create the above track one would be::

            track = speect.track_float.STrackFloat([0.131, 0.254, 0.428], [[0.2, 2.1, 8.6], [5.22, 675.32, 12.55], [0.453, 0.54, 9.6]])

        :param times: A Python list of the time values, floating point.
        :type times: list
        :param mlist: A Python list of lists containing only floating point values (frames and channels).
        :type mlist: list
        :return: Newly created STrackFloat object.
        :rtype: STrackFloat

        """
        this = _track_float.new_STrackFloat(times, fm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _track_float.delete_STrackFloat
    __del__ = lambda self: None

    def get(self):
        """

        get()

        Return a copy of this STrackFloat object as a Python tuple, with the first
        element being a list of the track times, and the second element being
        the frame and channel values.

        :return: A tuple, with the first element being a list of the track times, and the second element being the frame and channel values.
        :rtype: tuple

        """
        return _track_float.STrackFloat_get(self)

STrackFloat_swigregister = _track_float.STrackFloat_swigregister
STrackFloat_swigregister(STrackFloat)

# This file is compatible with both classic and new-style classes.


